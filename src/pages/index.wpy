<style>
page {
  background-color: #ebebeb;
}

.toast {
  width: 100%;
  height: 50rpx;
  color: #666;
  display: flex;
  font-size: 30rpx;
  align-items: center;
  justify-content: center;
  animation: toastAnima 0.6s ease infinite alternate;
}

@keyframes toastAnima {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
</style>

<template>
<MsgList :messages.sync="messages" @tap.user="bindTap" />
<view class="toast" @tap="bindTap" hidden="{{!toast}}">
  {{toast}}
</view>
<ControlBar :selections.sync="selections" @selection.user="bindSelection" @expand.user="bindExpand" />
</template>

<script>
import wepy from 'wepy'
import ControlBar from '@/components/ControlBar'
import MsgList from '@/components/MsgList'
import Director from '../engine/Director.js'
import EventBus from '../engine/EventBus.js'

export default class Index extends wepy.page {
  components = {
    ControlBar: ControlBar,
    MsgList: MsgList
  }

  data = {
    messages: [],
    selections: [],
    toast: ''
  }

  constructor() {
    super()
    this.director = new Director()
    EventBus.registerEvent('ActionFinish')
    EventBus.registerEvent('SetSelection')
    EventBus.registerEvent('ChooseSelection')
    EventBus.registerEvent('SetTitle')
  }

  methods = {
    bindSelection(index, e) {
      EventBus.publish(EventBus.Events.ChooseSelection, index)
    },
    bindExpand() {
      this.hideToast()
      this.scrollToBottom()
    },
    bindTap() {
      this.collapseControlBar(true)
    }
  }

  onSetTitle = arg => {
    wepy.setNavigationBarTitle({
      title: arg
    })
  }

  onActionFinish = (arg) => {
    this.pushMessage({
      id: arg.line.id,
      avatar: arg.role.avatar,
      name: arg.role.name,
      content: arg.line.content,
      type: arg.line.contentType ? arg.line.contentType : 0,
      fromMe: arg.role.fromMe
    })
    this.hideToast()
    this.activeControlBar(false)
    this.scrollToBottom()
    this.$apply()
  }

  onSetSelection = (arg) => {
    this.showToastDelay('点击 “回复” 选择对话')
    let selections = arg.selections
    let selectionString = []
    for (let idx in selections) {
      selectionString.push(selections[idx].content)
    }
    this.setSelections(selectionString)
    this.activeControlBar(true)
    this.$apply()
  }

  onLoad(options) {
    EventBus.subscribe(EventBus.Events.ActionFinish, this.onActionFinish)
    EventBus.subscribe(EventBus.Events.SetSelection, this.onSetSelection)
    EventBus.subscribe(EventBus.Events.SetTitle, this.onSetTitle)
    this.director.prepare()
    this.director.action()
  }

  onUnload() {
    EventBus.unsubscribe(EventBus.Events.ActionFinish, this.onActionFinish)
    EventBus.unsubscribe(EventBus.Events.SetSelection, this.onSetSelection)
    EventBus.unsubscribe(EventBus.Events.SetTitle, this.onSetTitle)
    this.director.stop()
  }

  activeControlBar(flag) {
    this.$invoke('ControlBar', 'setActive', flag)
  }

  collapseControlBar(flag) {
    this.$invoke('ControlBar', 'setCollapse', flag)
  }

  enableLoadMore(flag) {
    this.$invoke('MsgList', 'setEnableLoadMore', flag)
  }

  stopLoadMore() {
    this.$invoke('MsgList', 'stopLoadMore')
  }

  scrollToBottom() {
    this.$invoke('MsgList', 'scrollToBottom')
  }

  setSelections(selections) {
    this.selections = selections
  }

  pushMessage(message) {
    message['ani'] = true
    this.messages.push(message)
  }

  pushMsgList(msgList) {
    this.messages = this.messages.concat(msgList)
  }

  pullMsgList(msgList) {
    this.messages = msgList.concat(this.messages)
  }

  showToastDelay(toast) {
    this.showToast(toast, 1500)
  }

  showToast(toast, delay) {
    if (this.toastTimeout) {
      clearTimeout(this.toastTimeout)
      this.toastTimeout = 0
    }
    if (delay > 0) {
      this.toastTimeout = setTimeout(() => {
        this.toast = toast
        this.toastTimeout = 0
        this.$apply()
      }, delay)
    } else {
      this.toast = toast
    }
  }

  hideToast() {
    if (this.toastTimeout) {
      clearTimeout(this.toastTimeout)
      this.toastTimeout = 0
    }
    if (this.toast) {
      this.toast = ''
    }
  }
}
</script>
